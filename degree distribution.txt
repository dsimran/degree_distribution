import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
import math
import random
import collections
import seaborn as sns

# number of nodes in random graph
n = 30

# number of nodes in complete graph
k = 10

# total number of nodes in combined graph
N = n + k

# probably of edge connection
p = 0.1

G = nx.Graph()
color_map = []

# set the coords of the k clique nodes
for i in range(0, k):
    print(i)
    theta = (2 * i * math.pi) / k
    a = 5
    b = 0
    r = 1
    xi = a + r * math.cos(theta)
    yi = b + r * math.sin(theta)
    G.add_node(i, pos=(xi, yi))

# set the coords of the random nodes
for i in range(k, k + n):
    print(i)
    theta = (2 * i * math.pi) / n
    a = 0
    b = 0
    r = 2
    xi = a + r * math.cos(theta)
    yi = b + r * math.sin(theta)
    G.add_node(i, pos=(xi, yi))

# set edges in the complete graph
for i in range(0, k):
    print(i)
    for j in range(0, k):
        G.add_edge(i, j)

# set edges in the random graph
for i in range(k, k + n):
    print(i)
    for j in range(0, k + n):
        if random.uniform(0, 1) < p:
            G.add_edge(i, j)

# color the nodes
for node in G:
    if node < k:
        color_map.append('red')
    else:
        color_map.append('blue')

# plot the graph G
plt.figure(1)
pos = nx.get_node_attributes(G, 'pos')
nx.draw(G, pos, node_color=color_map, edge_color="grey", width=0.25, with_labels=True)

# plot the degree distribution

plt.figure(2)
degree_sequence = list(G.degree())
print("degree sequence :", degree_sequence)

print(degree_sequence[0])

# separate the coords into 2 arrays for plotting
node, degree = zip(*degree_sequence)

plt.bar(node, degree)
plt.xticks(node)
plt.yticks(degree)

plt.title("Degree Distribution")
plt.ylabel("degree")
plt.xlabel("nodes")

plt.show()

